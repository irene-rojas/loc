{"version":3,"sources":["components/Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","React","createElement","className","title","src","image","alt","description","href","url","target","rel","App","results","setResults","useState","query","setQuery","format","setFormat","loading","setLoading","onSubmit","event","preventDefault","Axios","get","concat","then","res","data","slice","console","log","value","onChange","class","type","disabled","aria-hidden","role","map","result","index","key","image_url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.006b2e96.chunk.js","sourcesContent":["import React from 'react';\nimport \"./Results.css\";\n\nconst Results = (props) => {\n    return (\n\n        <div className=\"resultsContent card\">\n\n            <strong>{props.title}</strong>\n            <br/>\n            <img src={props.image} alt={props.title} />\n            <p>{props.description}</p>\n            <br/>\n            <p><a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">Learn more</a></p>\n        </div>\n\n    )\n}\n\nexport default Results;","import React, { useState } from 'react';\nimport './App.css';\nimport Axios from 'axios';\nimport Results from \"./components/Results/Results\";\n\nfunction App() {\n\n    const [results, setResults] = useState([]);\n    const [query, setQuery] = useState(\"\");\n    const [format, setFormat] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n\n\n    const imageSearch = () => {\n        setLoading(true);\n        Axios.get(`https://www.loc.gov/${format}/?q=${query}&fo=json`)\n        .then(res => {\n            setResults(res.data.results.slice(0,150));\n            console.log(res.data.results);\n        }).then(() => {\n            setLoading(false);\n        });\n    };\n\n\n  return (\n    <div className=\"parallax\">\n\n        <div className=\"App\">\n\n            <div className=\"header\">\n                <div className=\"headerText\">\n                    <h1>Search the Library of Congress</h1>\n\n                    <p>Powered by the <a href=\"https://libraryofcongress.github.io/data-exploration/\" target=\"_blank\" rel=\"noopener noreferrer\">LOC API</a><br />\n                    No-frills portal to search the Library of Congress collection.<br />\n                    Returns first 150 results, when available.</p>\n                </div>\n\n                <div className=\"searchFormDiv\">\n                    <form \n                        className=\"searchForm\"\n                        onSubmit={event => {\n                            event.preventDefault();\n                            imageSearch();\n                        }}>\n\n                        <div className=\"row\">\n                            <div className=\"col\">\n                                <p className=\"searchTextEntry\"><strong>Enter a search term:</strong>\n                                    <br />\n                                    <input \n                                        className=\"searchTerm form-control form-control-sm\"\n                                        title=\"Enter a search term\"\n                                        value={query}\n                                        onChange={event => {\n                                            event.preventDefault();\n                                            setQuery(event.target.value);\n                                        }}\n                                        />\n                                </p>\n                            </div>\n                            <div className=\"col\">\n                                <p className=\"formatSelectEntry\"><strong>Select media format:</strong>\n                                    <br />\n                                        <select\n                                            title=\"Select media format\"\n                                            className=\"formatDropdown form-select-sm\"\n                                            value={format}\n                                            onChange={event => {\n                                                event.preventDefault();\n                                                setFormat(event.target.value);\n                                            }}>\n                                            <option>Select media format</option>\n                                            <option value=\"photos\">Photos</option>\n                                            <option value=\"audio\">Audio</option>\n                                            <option value=\"film-and-videos\">Film/Videos</option>\n                                            <option value=\"newspapers\">Newspapers</option>\n                                            <option value=\"maps\">Maps</option>\n                                            <option value=\"manuscripts\">Manuscripts</option>\n                                            <option value=\"websites\">Websites</option>\n                                            <option value=\"notated-music\">Printed Music</option>\n                                        </select>\n                                </p>\n                            </div>\n                            <div className=\"col d-flex align-items-center\">\n                                    {loading === false &&\n                                        <button className=\"btn btn-primary\">Submit</button>}\n\n                                    {loading === true &&\n                                        <button class=\"btn btn-primary\" type=\"button\" disabled>\n                                        <span class=\"spinner-border spinner-border-sm\" aria-hidden=\"true\"></span>\n                                        <span class=\"visually-hidden\" role=\"status\">Loading...</span></button>}\n                            </div>\n                        </div>\n                    </form>\n\n                </div>\n            </div>\n\n\n            <div className=\"resultsDiv\">\n                {results.map((result, index) => {\n                    return (\n                            <Results\n                                className=\"singleResult\" \n                                key={index}\n                                title={result.title}\n                                description={result.description}\n                                image={result.image_url[0]}\n                                url={result.url}\n                            />\n                    )\n                })}\n            </div>\n\n        </div>\n        {/* end App */}\n\n    </div>\n    // end parallax\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}